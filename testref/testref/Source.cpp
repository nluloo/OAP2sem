#include <iostream> // Подключение библиотеки ввода/вывода
#include <conio.h> // Подключение библиотеки для использования функции _getch
#include <chrono> // Библиотека для замера времени выполнения функции

using namespace std; // Объявление пространства имен std

int int_pwr(register int m, register int e); // Прототип функции int_pwr в которую передаются классы памяти(регистры)

int main() { // Функция main, начало программы

	int io; // Объявление перемменой io типа данныз int с классом auto(по умолчанию)

	auto start_value = chrono::high_resolution_clock::now(); // Объявляем переменную start_value для замера времени выполнения программы.(начальное время)
	io = int_pwr(2, 30); // Заходим в функцию int_pwr с передаваимыми значениями 2 и 30 и присваиваем вернувшее значение переменной io
	auto end_value = chrono::high_resolution_clock::now(); // Объявляем переменную end_value для замера времени конца выполнения функции.(конечное время)
	chrono::duration<double, nano> difference_value = end_value - start_value; // Путем вычера конечного времени от начального вычисляем время выполнения функции.
	// Данное время будем выводить в наносекундах

	cout << "2 is equal to 30 degress " << io << "\nSpeed: " << difference_value.count() << " nano";// Вывод значений переменной io и difference_value на экран.
	// io - число 2 возведенное в 30 степень
	// difference_value - время выполнения программы

	printf("\n\nPress any key to finish\n"); // Предложение, выводящееся на экран, для завершения программы при нажатии клавиши.
	_getch(); // Функция, считывающее значения с клавиатуры

	return 0; // Возврат значения в функции с типом данных int
}

int int_pwr(register int m, register int e) { // Тело функции int_pwr, в которую передаются класс памяти(регистры)

	register int temp; // объявление переменной с классом памяти регистра. Живет только в данной функции, не может выйти за предела блока.
	temp = 1; // Присвоение переменной temp значения 1

	for (; e; e--) temp = temp * m; // Пока e не достигнет 0 будет выполняться данный цикл, где каждое значение 
	return temp; // Возвращение получившегося значения
}